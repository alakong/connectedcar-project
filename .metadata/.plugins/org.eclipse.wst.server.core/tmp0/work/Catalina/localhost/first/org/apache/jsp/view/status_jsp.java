/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.6
 * Generated at: 2018-06-01 11:28:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class status_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(5);
    _jspx_dependants.put("jar:file:/C:/project/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/first/WEB-INF/lib/spring-webmvc-5.0.5.RELEASE.jar!/META-INF/spring-form.tld", Long.valueOf(1522752190000L));
    _jspx_dependants.put("/WEB-INF/lib/spring-webmvc-5.0.5.RELEASE.jar", Long.valueOf(1525933211405L));
    _jspx_dependants.put("jar:file:/C:/project/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/first/WEB-INF/lib/standard-1.1.2.jar!/META-INF/c.tld", Long.valueOf(1098678690000L));
    _jspx_dependants.put("jar:file:/C:/project/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/first/WEB-INF/lib/spring-webmvc-5.0.5.RELEASE.jar!/META-INF/spring.tld", Long.valueOf(1522752190000L));
    _jspx_dependants.put("/WEB-INF/lib/standard-1.1.2.jar", Long.valueOf(1520823355453L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<link href=\"view/css/sb-admin.css\" rel=\"stylesheet\">\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<script src=\"jQueryRotateCompressed.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"http://beneposto.pl/jqueryrotate/js/jQueryRotateCompressed.js\"></script>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<style>\r\n");
      out.write("#image {\r\n");
      out.write("\twidth: 30%;\r\n");
      out.write("\theight: 20%;\r\n");
      out.write("\tfloat: left;\r\n");
      out.write("\tmargin: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("td {\r\n");
      out.write("\tWORD-BREAK: break-all;\r\n");
      out.write("\tcolor : white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=EUC-KR\">\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<img src=\"img/car2.gif\" id=\"image\">\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"row\">\r\n");
      out.write("\t\t<div class=\"col-lg-6\">\r\n");
      out.write("\t\t\t<div class=\"panel panel-default\">\r\n");
      out.write("\t\t\t\t<div class=\"panel-heading\"; style=\"color : white\">차량정보</div>\r\n");
      out.write("\t\t\t\t<!-- /.panel-heading -->\r\n");
      out.write("\t\t\t\t<div class=\"panel-body\">\r\n");
      out.write("\t\t\t\t\t<div class=\"table-responsive\">\r\n");
      out.write("\t\t\t\t\t\t<table class=\"table table-striped table-bordered table-hover\">\r\n");
      out.write("\t\t\t\t\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<td>이름</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<td>다혜</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<td>ID</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<td>dahyezzang</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<td>차대번호</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<td>#123456789</td>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<td>차량번호</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t\t<td>25가 1548</td>\r\n");
      out.write("\t\t\t\t\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t\t\t\t</tbody>\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t</table>\r\n");
      out.write("\t\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t\t<!-- /.table-responsive -->\r\n");
      out.write("\t\t\t\t</div>\r\n");
      out.write("\t\t\t\t<!-- /.panel-body -->\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<!-- /.panel -->\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t</body>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=EUC-KR\">\r\n");
      out.write("<script type=\"text/javascript\"\r\n");
      out.write("\tsrc=\"http://maps.google.com/maps/api/js?sensor=false&language=ko\"></script>\r\n");
      out.write("<script async defer\r\n");
      out.write("\tsrc=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDKy-W18gyBXJQGDU2diCyAdo_0nzc2ze0&callback=initMap\"\r\n");
      out.write("\ttype=\"text/javascript\"></script>\r\n");
      out.write("\r\n");
      out.write("<h5 style=\"color : white\">현재위치</h5>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("\tfunction initialize(input) {\r\n");
      out.write("\r\n");
      out.write("\t\tvar mapOptions = {\r\n");
      out.write("\t\t\tzoom : 17,\r\n");
      out.write("\t\t\tcenter : input[0],\r\n");
      out.write("\t\t\tmapTypeId : google.maps.MapTypeId.ROADMAP\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar map = new google.maps.Map(document.getElementById('map_canvas'),\r\n");
      out.write("\t\t\t\tmapOptions);\r\n");
      out.write("\r\n");
      out.write("\t\tfor (obj in input) {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\t(function(idx){\r\n");
      out.write("\t\t\t\tvar myLatlng = new google.maps.LatLng(input[idx]); // y, x좌표값\r\n");
      out.write("\t\t\t\tvar marker = new google.maps.Marker({\r\n");
      out.write("\t\t\t\t\tposition : myLatlng,\r\n");
      out.write("\t\t\t\t\tmap : map,\r\n");
      out.write("\t\t\t\t\ttitle : \"어디어디입니다\"\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tvar infowindow = new google.maps.InfoWindow({\r\n");
      out.write("\t\t\t\t\tcontent : \"<h1>어디어디입니다</h1>\",\r\n");
      out.write("\t\t\t\t\tmaxWidth : 300\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tgoogle.maps.event.addListener(marker, 'click', function() {\r\n");
      out.write("\t\t\t\t\tinfowindow.open(map, marker);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t})(obj);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t$(document).ready(function() {\r\n");
      out.write("\t\t// Server에 데이터를 요청한다.\r\n");
      out.write("\t\t// AJAX로\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl : 'mapimpl.do',\r\n");
      out.write("\t\t\tdataType : 'json',\r\n");
      out.write("\t\t\tsuccess : function(data) {\r\n");
      out.write("\t\t\t\t//alert(data);\r\n");
      out.write("\t\t\t\tinitialize(data);\r\n");
      out.write("\t\t\t\talert(JSON.parse(data)); \r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror : function(e) {\r\n");
      out.write("\t\t\t\talert('fail');\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t<!-- 지도를 출력할 영역에 아래 소스 삽입! -->\r\n");
      out.write("\t<div id=\"map_canvas\" style=\"width: 300px; height: 300px; margin-top: 10px;float : left\"></div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- Bootstrap core JavaScript-->\r\n");
      out.write("<script src=\"view/vendor/jquery/jquery.min.js\"></script>\r\n");
      out.write("<script src=\"view/vendor/bootstrap/js/bootstrap.bundle.min.js\"></script>\r\n");
      out.write("<!-- Core plugin JavaScript-->\r\n");
      out.write("<script src=\"view/vendor/jquery-easing/jquery.easing.min.js\"></script>\r\n");
      out.write("<!-- Page level plugin JavaScript-->\r\n");
      out.write("<script src=\"view/vendor/chart.js/Chart.min.js\"></script>\r\n");
      out.write("<!-- Custom scripts for all pages-->\r\n");
      out.write("<script src=\"view/js/sb-admin.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<!-- Custom scripts for this page-->\r\n");
      out.write("<script src=\"view/js/sb-admin-charts.js\"></script>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("var deliveredData = {\r\n");
      out.write("        labels: [\r\n");
      out.write("            \"Value\"\r\n");
      out.write("        ],\r\n");
      out.write("        datasets: [\r\n");
      out.write("            {\r\n");
      out.write("                data: [85, 15],\r\n");
      out.write("                backgroundColor: [\r\n");
      out.write("                    \"#3ec556\",\r\n");
      out.write("                    \"rgba(0,0,0,0)\"\r\n");
      out.write("                ],\r\n");
      out.write("                hoverBackgroundColor: [\r\n");
      out.write("                    \"#3ec556\",\r\n");
      out.write("                    \"rgba(0,0,0,0)\"\r\n");
      out.write("                ],\r\n");
      out.write("                borderWidth: [\r\n");
      out.write("                    0, 0\r\n");
      out.write("                ]\r\n");
      out.write("            }]\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("    var deliveredOpt = {\r\n");
      out.write("        cutoutPercentage: 88,\r\n");
      out.write("        animation: {\r\n");
      out.write("            animationRotate: true,\r\n");
      out.write("            duration: 2000\r\n");
      out.write("        },\r\n");
      out.write("        legend: {\r\n");
      out.write("            display: false\r\n");
      out.write("        },\r\n");
      out.write("        tooltips: {\r\n");
      out.write("            enabled: false\r\n");
      out.write("        }\r\n");
      out.write("    };\r\n");
      out.write("\r\n");
      out.write("   var chart = new Chart($('#openedCanvas'), {\r\n");
      out.write("        type: 'doughnut',\r\n");
      out.write("        data: deliveredData,\r\n");
      out.write("        options: deliveredOpt\r\n");
      out.write("    });\r\n");
      out.write("}};\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- 하이차트 스크립트 -------------------------------------------------------->\r\n");
      out.write("<script src=\"https://code.highcharts.com/highcharts.js\"></script>\r\n");
      out.write("<script src=\"https://code.highcharts.com/highcharts-more.js\"></script>\r\n");
      out.write("<script src=\"https://code.highcharts.com/modules/solid-gauge.js\"></script>\r\n");
      out.write("<div id=\"container\" style=\"min-width: 310px; max-width: 400px; height: 300px; margin: 10px; float : left\"></div>\r\n");
      out.write("\r\n");
      out.write("<!----------------------------------------------------------------------->\t\t\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("function renderIcons() {\r\n");
      out.write("\r\n");
      out.write("    // Move icon\r\n");
      out.write("    if (!this.series[0].icon) {\r\n");
      out.write("        this.series[0].icon = this.renderer.path(['M', -8, 0, 'L', 8, 0, 'M', 0, -8, 'L', 8, 0, 0, 8])\r\n");
      out.write("            .attr({\r\n");
      out.write("                'stroke': '#303030',\r\n");
      out.write("                'stroke-linecap': 'round',\r\n");
      out.write("                'stroke-linejoin': 'round',\r\n");
      out.write("                'stroke-width': 2,\r\n");
      out.write("                'zIndex': 10\r\n");
      out.write("            })\r\n");
      out.write("            .add(this.series[2].group);\r\n");
      out.write("    }\r\n");
      out.write("    this.series[0].icon.translate(\r\n");
      out.write("        this.chartWidth / 2 - 10,\r\n");
      out.write("        this.plotHeight / 2 - this.series[0].points[0].shapeArgs.innerR -\r\n");
      out.write("            (this.series[0].points[0].shapeArgs.r - this.series[0].points[0].shapeArgs.innerR) / 2\r\n");
      out.write("    );\r\n");
      out.write("\r\n");
      out.write("    // Exercise icon\r\n");
      out.write("    if (!this.series[1].icon) {\r\n");
      out.write("        this.series[1].icon = this.renderer.path(\r\n");
      out.write("            ['M', -8, 0, 'L', 8, 0, 'M', 0, -8, 'L', 8, 0, 0, 8,\r\n");
      out.write("                'M', 8, -8, 'L', 16, 0, 8, 8]\r\n");
      out.write("            )\r\n");
      out.write("            .attr({\r\n");
      out.write("                'stroke': '#ffffff',\r\n");
      out.write("                'stroke-linecap': 'round',\r\n");
      out.write("                'stroke-linejoin': 'round',\r\n");
      out.write("                'stroke-width': 2,\r\n");
      out.write("                'zIndex': 10\r\n");
      out.write("            })\r\n");
      out.write("            .add(this.series[2].group);\r\n");
      out.write("    }\r\n");
      out.write("    this.series[1].icon.translate(\r\n");
      out.write("        this.chartWidth / 2 - 10,\r\n");
      out.write("        this.plotHeight / 2 - this.series[1].points[0].shapeArgs.innerR -\r\n");
      out.write("            (this.series[1].points[0].shapeArgs.r - this.series[1].points[0].shapeArgs.innerR) / 2\r\n");
      out.write("    );\r\n");
      out.write("\r\n");
      out.write("    // Stand icon\r\n");
      out.write("    if (!this.series[2].icon) {\r\n");
      out.write("        this.series[2].icon = this.renderer.path(['M', 0, 8, 'L', 0, -8, 'M', -8, 0, 'L', 0, -8, 8, 0])\r\n");
      out.write("            .attr({\r\n");
      out.write("                'stroke': '#303030',\r\n");
      out.write("                'stroke-linecap': 'round',\r\n");
      out.write("                'stroke-linejoin': 'round',\r\n");
      out.write("                'stroke-width': 2,\r\n");
      out.write("                'zIndex': 10\r\n");
      out.write("            })\r\n");
      out.write("            .add(this.series[2].group);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    this.series[2].icon.translate(\r\n");
      out.write("        this.chartWidth / 2 - 10,\r\n");
      out.write("        this.plotHeight / 2 - this.series[2].points[0].shapeArgs.innerR -\r\n");
      out.write("            (this.series[2].points[0].shapeArgs.r - this.series[2].points[0].shapeArgs.innerR) / 2\r\n");
      out.write("    );\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("Highcharts.chart('container', {\r\n");
      out.write("\r\n");
      out.write("    chart: {\r\n");
      out.write("    \tbackgroundColor: 'none',\r\n");
      out.write("        type: 'solidgauge',\r\n");
      out.write("        height: '110%',\r\n");
      out.write("        events: {\r\n");
      out.write("            render: renderIcons\r\n");
      out.write("        }\r\n");
      out.write("    },\r\n");
      out.write("\r\n");
      out.write("    title: {\r\n");
      out.write("        text: 'MYCarInfo',\r\n");
      out.write("        style: {\r\n");
      out.write("            fontSize: '30px',\r\n");
      out.write("            color:'white'\r\n");
      out.write("        }\r\n");
      out.write("    },\r\n");
      out.write("\r\n");
      out.write("    tooltip: {\r\n");
      out.write("        borderWidth: 0,\r\n");
      out.write("        backgroundColor: 'none',\r\n");
      out.write("        shadow: false,\r\n");
      out.write("        style: {\r\n");
      out.write("            fontSize: '16px'\r\n");
      out.write("        },\r\n");
      out.write("        pointFormat: '{series.name}<br><span style=\"font-size:2em; color: {point.color}; font-weight: bold\">{point.y}%</span>',\r\n");
      out.write("        positioner: function (labelWidth) {\r\n");
      out.write("            return {\r\n");
      out.write("                x: (this.chart.chartWidth - labelWidth) / 2,\r\n");
      out.write("                y: (this.chart.plotHeight / 2) + 15\r\n");
      out.write("            };\r\n");
      out.write("        }\r\n");
      out.write("    },\r\n");
      out.write("\r\n");
      out.write("    pane: {\r\n");
      out.write("        startAngle: 0,\r\n");
      out.write("        endAngle: 360,\r\n");
      out.write("        background: [{ // Track for Move\r\n");
      out.write("            outerRadius: '112%',\r\n");
      out.write("            innerRadius: '88%',\r\n");
      out.write("            backgroundColor: Highcharts.Color(Highcharts.getOptions().colors[0])\r\n");
      out.write("                .setOpacity(0.3)\r\n");
      out.write("                .get(),\r\n");
      out.write("            borderWidth: 0\r\n");
      out.write("        }, { // Track for Exercise\r\n");
      out.write("            outerRadius: '87%',\r\n");
      out.write("            innerRadius: '63%',\r\n");
      out.write("            backgroundColor: Highcharts.Color(Highcharts.getOptions().colors[7])\r\n");
      out.write("                .setOpacity(0.3)\r\n");
      out.write("                .get(),\r\n");
      out.write("            borderWidth: 0\r\n");
      out.write("        }, { // Track for Stand\r\n");
      out.write("            outerRadius: '62%',\r\n");
      out.write("            innerRadius: '38%',\r\n");
      out.write("            backgroundColor: Highcharts.Color(Highcharts.getOptions().colors[2])\r\n");
      out.write("                .setOpacity(0.3)\r\n");
      out.write("                .get(),\r\n");
      out.write("            borderWidth: 0\r\n");
      out.write("        }]\r\n");
      out.write("    },\r\n");
      out.write("\r\n");
      out.write("    yAxis: {\r\n");
      out.write("        min: 0,\r\n");
      out.write("        max: 100,\r\n");
      out.write("        lineWidth: 0,\r\n");
      out.write("        tickPositions: []\r\n");
      out.write("    },\r\n");
      out.write("\r\n");
      out.write("    plotOptions: {\r\n");
      out.write("        solidgauge: {\r\n");
      out.write("            dataLabels: {\r\n");
      out.write("                enabled: false\r\n");
      out.write("            },\r\n");
      out.write("            linecap: 'round',\r\n");
      out.write("            stickyTracking: false,\r\n");
      out.write("            rounded: true\r\n");
      out.write("        }\r\n");
      out.write("    },\r\n");
      out.write("\r\n");
      out.write("    series: [{\r\n");
      out.write("        name: '주유량',\r\n");
      out.write("        color : 'white',\r\n");
      out.write("        data: [{\r\n");
      out.write("            color: Highcharts.getOptions().colors[0],\r\n");
      out.write("            radius: '112%',\r\n");
      out.write("            innerRadius: '88%',\r\n");
      out.write("            y: 80\r\n");
      out.write("        }]\r\n");
      out.write("    }, {\r\n");
      out.write("        name: '평균연비',\r\n");
      out.write("        data: [{\r\n");
      out.write("            color: Highcharts.getOptions().colors[7],\r\n");
      out.write("            radius: '87%',\r\n");
      out.write("            innerRadius: '63%',\r\n");
      out.write("            y: 65\r\n");
      out.write("        }]\r\n");
      out.write("    }, {\r\n");
      out.write("        name: '타이어공기압',\r\n");
      out.write("        data: [{\r\n");
      out.write("            color: Highcharts.getOptions().colors[2],\r\n");
      out.write("            radius: '62%',\r\n");
      out.write("            innerRadius: '38%',\r\n");
      out.write("            y: 50\r\n");
      out.write("        }]\r\n");
      out.write("    }]\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
